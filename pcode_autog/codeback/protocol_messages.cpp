/* This file is generated by pcode_autog
** Copyright(c) Laked.Goo, ALL RIGHTS RESERVED.
**
** Purpose: contains all protocol message definiations and codec function
**          implementations
**
*/
#include "protocol_messages.h"

using namespace exx::net;
using namespace messages;

player_room_list_refresh_request::player_room_list_refresh_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 2;
}

void player_room_list_refresh_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->page_num_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_room_list_refresh_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->page_num_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_room_list_refresh_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_room_list_refresh_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("page_num_", (int)this->page_num_ << '\n', '-');
    return ss.str();
}

player_room_list_refresh_response::player_room_list_refresh_response(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 3;
}

void player_room_list_refresh_response::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->retcode_, ++ptr;
    *( (uint8_t*)ptr ) = this->hall_num_, ++ptr;
    *( (uint8_t*)ptr ) = this->page_num_, ++ptr;
    if(0 == this->retcode_)
    {
        for(int room_infos_index = 0; room_infos_index < 18; ++room_infos_index)
        {
            *( (uint8_t*)ptr ) = this->room_infos_[room_infos_index].room_num_, ++ptr;
            *( (uint8_t*)ptr ) = this->room_infos_[room_infos_index].player_count_, ++ptr;
            *( (uint8_t*)ptr ) = this->room_infos_[room_infos_index].room_status_, ++ptr;
        }
    }
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_room_list_refresh_response::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->retcode_ = *( (uint8_t*)ptr ), ++ptr;
    this->hall_num_ = *( (uint8_t*)ptr ), ++ptr;
    this->page_num_ = *( (uint8_t*)ptr ), ++ptr;
    if(0 == this->retcode_)
    {
        for(int room_infos_index = 0; room_infos_index < 18; ++room_infos_index)
        {
            this->room_infos_[room_infos_index].room_num_ = *( (uint8_t*)ptr ), ++ptr;
            this->room_infos_[room_infos_index].player_count_ = *( (uint8_t*)ptr ), ++ptr;
            this->room_infos_[room_infos_index].room_status_ = *( (uint8_t*)ptr ), ++ptr;
        }
    }
}

std::string player_room_list_refresh_response::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_room_list_refresh_response:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("retcode_", (int)this->retcode_ << '\n', '-');
    ss << strfmt("hall_num_", (int)this->hall_num_ << '\n', '-');
    ss << strfmt("page_num_", (int)this->page_num_ << '\n', '-');
    if(0 == this->retcode_)
    {
        for(int room_infos_index = 0; room_infos_index < 18; ++room_infos_index)
        {
            ss << "this->room_infos_[" << room_infos_index << "]: \n";
            ss << strfmt("room_num_", (int)this->room_infos_[room_infos_index].room_num_ << '\n', '-');
            ss << strfmt("player_count_", (int)this->room_infos_[room_infos_index].player_count_ << '\n', '-');
            ss << strfmt("room_status_", (int)this->room_infos_[room_infos_index].room_status_ << '\n', '-');
        }
    }
    return ss.str();
}

player_view_online_count_request::player_view_online_count_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 4;
}

void player_view_online_count_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_view_online_count_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
}

std::string player_view_online_count_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_view_online_count_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    return ss.str();
}

player_view_online_count_response::player_view_online_count_response(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 5;
}

void player_view_online_count_response::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->count_of_hall_, ptr);
    conv::to_netval(this->count_of_total_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_view_online_count_response::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->count_of_hall_, ptr);
    conv::to_hostval(this->count_of_total_, ptr);
}

std::string player_view_online_count_response::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_view_online_count_response:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("count_of_hall_", this->count_of_hall_ << '\n', '-');
    ss << strfmt("count_of_total_", this->count_of_total_ << '\n', '-');
    return ss.str();
}

player_enter_room_request::player_enter_room_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 6;
}

void player_enter_room_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->room_number_, ++ptr;
    conv::to_netval(this->player_info_from_client_.id_, ptr);
    conv::to_netval(this->player_info_from_client_.name_, ptr, 16);
    *( (uint8_t*)ptr ) = this->player_info_from_client_.role_id_, ++ptr;
    conv::to_netval(this->player_info_from_client_.x_, ptr);
    conv::to_netval(this->player_info_from_client_.y_, ptr);
    *( (uint8_t*)ptr ) = this->player_info_from_client_.move_type_, ++ptr;
    *( (uint8_t*)ptr ) = this->player_info_from_client_.direction_, ++ptr;
    *( (uint8_t*)ptr ) = this->player_info_from_client_.ready_state_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_enter_room_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->room_number_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->player_info_from_client_.id_, ptr);
    conv::to_hostval(this->player_info_from_client_.name_, ptr, 16);
    this->player_info_from_client_.role_id_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->player_info_from_client_.x_, ptr);
    conv::to_hostval(this->player_info_from_client_.y_, ptr);
    this->player_info_from_client_.move_type_ = *( (uint8_t*)ptr ), ++ptr;
    this->player_info_from_client_.direction_ = *( (uint8_t*)ptr ), ++ptr;
    this->player_info_from_client_.ready_state_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_enter_room_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_enter_room_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("room_number_", (int)this->room_number_ << '\n', '-');
    ss << strfmt("id_", this->player_info_from_client_.id_ << '\n', '-');
    ss << strfmt("name_", this->player_info_from_client_.name_ << '\n', '-');
    ss << strfmt("role_id_", (int)this->player_info_from_client_.role_id_ << '\n', '-');
    ss << strfmt("x_", this->player_info_from_client_.x_ << '\n', '-');
    ss << strfmt("y_", this->player_info_from_client_.y_ << '\n', '-');
    ss << strfmt("move_type_", (int)this->player_info_from_client_.move_type_ << '\n', '-');
    ss << strfmt("direction_", (int)this->player_info_from_client_.direction_ << '\n', '-');
    ss << strfmt("ready_state_", (int)this->player_info_from_client_.ready_state_ << '\n', '-');
    return ss.str();
}

player_enter_room_response::player_enter_room_response(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 7;
}

void player_enter_room_response::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->retcode_, ++ptr;
    *( (uint8_t*)ptr ) = this->hall_number_, ++ptr;
    *( (uint8_t*)ptr ) = this->room_number_, ++ptr;
    *( (uint8_t*)ptr ) = this->player_count_, ++ptr;
    for(uint8_t all_player_infos_index = 0; all_player_infos_index < this->player_count_ && all_player_infos_index < 6; ++all_player_infos_index)
    {
        conv::to_netval(this->all_player_infos_[all_player_infos_index].ci_.id_, ptr);
        conv::to_netval(this->all_player_infos_[all_player_infos_index].ci_.name_, ptr, 16);
        *( (uint8_t*)ptr ) = this->all_player_infos_[all_player_infos_index].ci_.role_id_, ++ptr;
        conv::to_netval(this->all_player_infos_[all_player_infos_index].ci_.x_, ptr);
        conv::to_netval(this->all_player_infos_[all_player_infos_index].ci_.y_, ptr);
        *( (uint8_t*)ptr ) = this->all_player_infos_[all_player_infos_index].ci_.move_type_, ++ptr;
        *( (uint8_t*)ptr ) = this->all_player_infos_[all_player_infos_index].ci_.direction_, ++ptr;
        *( (uint8_t*)ptr ) = this->all_player_infos_[all_player_infos_index].ci_.ready_state_, ++ptr;
        *( (uint8_t*)ptr ) = this->all_player_infos_[all_player_infos_index].si_.level_, ++ptr;
        conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.level_cur_exp_, ptr);
        conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.levelup_total_exp_, ptr);
        conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.history_highest_round_exp_, ptr);
        conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.history_highest_round_gold_, ptr);
        conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.total_gold_, ptr);
        conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.gold_capacity_, ptr);
        conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.evalue_, ptr);
        conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.evalue_toplimit_, ptr);
        *( (uint8_t*)ptr ) = this->all_player_infos_[all_player_infos_index].si_.index_in_room_, ++ptr;
        *( (uint8_t*)ptr ) = this->all_player_infos_[all_player_infos_index].si_.service_count_, ++ptr;
        for(uint8_t service_infos_index = 0; service_infos_index < this->all_player_infos_[all_player_infos_index].si_.service_count_ && service_infos_index < 9; ++service_infos_index)
        {
            conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.service_infos_[service_infos_index].item_id_, ptr);
            conv::to_netval(this->all_player_infos_[all_player_infos_index].si_.service_infos_[service_infos_index].item_pay_type_, ptr);
        }
    }
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_enter_room_response::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->retcode_ = *( (uint8_t*)ptr ), ++ptr;
    this->hall_number_ = *( (uint8_t*)ptr ), ++ptr;
    this->room_number_ = *( (uint8_t*)ptr ), ++ptr;
    this->player_count_ = *( (uint8_t*)ptr ), ++ptr;
    for(uint8_t all_player_infos_index = 0; all_player_infos_index < this->player_count_ && all_player_infos_index < 6; ++all_player_infos_index)
    {
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].ci_.id_, ptr);
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].ci_.name_, ptr, 16);
        this->all_player_infos_[all_player_infos_index].ci_.role_id_ = *( (uint8_t*)ptr ), ++ptr;
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].ci_.x_, ptr);
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].ci_.y_, ptr);
        this->all_player_infos_[all_player_infos_index].ci_.move_type_ = *( (uint8_t*)ptr ), ++ptr;
        this->all_player_infos_[all_player_infos_index].ci_.direction_ = *( (uint8_t*)ptr ), ++ptr;
        this->all_player_infos_[all_player_infos_index].ci_.ready_state_ = *( (uint8_t*)ptr ), ++ptr;
        this->all_player_infos_[all_player_infos_index].si_.level_ = *( (uint8_t*)ptr ), ++ptr;
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.level_cur_exp_, ptr);
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.levelup_total_exp_, ptr);
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.history_highest_round_exp_, ptr);
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.history_highest_round_gold_, ptr);
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.total_gold_, ptr);
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.gold_capacity_, ptr);
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.evalue_, ptr);
        conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.evalue_toplimit_, ptr);
        this->all_player_infos_[all_player_infos_index].si_.index_in_room_ = *( (uint8_t*)ptr ), ++ptr;
        this->all_player_infos_[all_player_infos_index].si_.service_count_ = *( (uint8_t*)ptr ), ++ptr;
        for(uint8_t service_infos_index = 0; service_infos_index < this->all_player_infos_[all_player_infos_index].si_.service_count_ && service_infos_index < 9; ++service_infos_index)
        {
            conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.service_infos_[service_infos_index].item_id_, ptr);
            conv::to_hostval(this->all_player_infos_[all_player_infos_index].si_.service_infos_[service_infos_index].item_pay_type_, ptr);
        }
    }
}

std::string player_enter_room_response::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_enter_room_response:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("retcode_", (int)this->retcode_ << '\n', '-');
    ss << strfmt("hall_number_", (int)this->hall_number_ << '\n', '-');
    ss << strfmt("room_number_", (int)this->room_number_ << '\n', '-');
    ss << strfmt("player_count_", (int)this->player_count_ << '\n', '-');
    for(uint8_t all_player_infos_index = 0; all_player_infos_index < this->player_count_ && all_player_infos_index < 6; ++all_player_infos_index)
    {
        ss << "this->all_player_infos_[" << all_player_infos_index << "]: \n";
        ss << strfmt("id_", this->all_player_infos_[all_player_infos_index].ci_.id_ << '\n', '-');
        ss << strfmt("name_", this->all_player_infos_[all_player_infos_index].ci_.name_ << '\n', '-');
        ss << strfmt("role_id_", (int)this->all_player_infos_[all_player_infos_index].ci_.role_id_ << '\n', '-');
        ss << strfmt("x_", this->all_player_infos_[all_player_infos_index].ci_.x_ << '\n', '-');
        ss << strfmt("y_", this->all_player_infos_[all_player_infos_index].ci_.y_ << '\n', '-');
        ss << strfmt("move_type_", (int)this->all_player_infos_[all_player_infos_index].ci_.move_type_ << '\n', '-');
        ss << strfmt("direction_", (int)this->all_player_infos_[all_player_infos_index].ci_.direction_ << '\n', '-');
        ss << strfmt("ready_state_", (int)this->all_player_infos_[all_player_infos_index].ci_.ready_state_ << '\n', '-');
        ss << strfmt("level_", (int)this->all_player_infos_[all_player_infos_index].si_.level_ << '\n', '-');
        ss << strfmt("level_cur_exp_", this->all_player_infos_[all_player_infos_index].si_.level_cur_exp_ << '\n', '-');
        ss << strfmt("levelup_total_exp_", this->all_player_infos_[all_player_infos_index].si_.levelup_total_exp_ << '\n', '-');
        ss << strfmt("history_highest_round_exp_", this->all_player_infos_[all_player_infos_index].si_.history_highest_round_exp_ << '\n', '-');
        ss << strfmt("history_highest_round_gold_", this->all_player_infos_[all_player_infos_index].si_.history_highest_round_gold_ << '\n', '-');
        ss << strfmt("total_gold_", this->all_player_infos_[all_player_infos_index].si_.total_gold_ << '\n', '-');
        ss << strfmt("gold_capacity_", this->all_player_infos_[all_player_infos_index].si_.gold_capacity_ << '\n', '-');
        ss << strfmt("evalue_", this->all_player_infos_[all_player_infos_index].si_.evalue_ << '\n', '-');
        ss << strfmt("evalue_toplimit_", this->all_player_infos_[all_player_infos_index].si_.evalue_toplimit_ << '\n', '-');
        ss << strfmt("index_in_room_", (int)this->all_player_infos_[all_player_infos_index].si_.index_in_room_ << '\n', '-');
        ss << strfmt("service_count_", (int)this->all_player_infos_[all_player_infos_index].si_.service_count_ << '\n', '-');
        for(uint8_t service_infos_index = 0; service_infos_index < this->all_player_infos_[all_player_infos_index].si_.service_count_ && service_infos_index < 9; ++service_infos_index)
        {
            ss << "this->all_player_infos_[all_player_infos_index].si_.service_infos_[" << service_infos_index << "]: \n";
            ss << strfmt("item_id_", this->all_player_infos_[all_player_infos_index].si_.service_infos_[service_infos_index].item_id_ << '\n', '-');
            ss << strfmt("item_pay_type_", this->all_player_infos_[all_player_infos_index].si_.service_infos_[service_infos_index].item_pay_type_ << '\n', '-');
        }
    }
    return ss.str();
}

player_enter_room_information::player_enter_room_information(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 31;
}

void player_enter_room_information::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->new_player_info_.ci_.id_, ptr);
    conv::to_netval(this->new_player_info_.ci_.name_, ptr, 16);
    *( (uint8_t*)ptr ) = this->new_player_info_.ci_.role_id_, ++ptr;
    conv::to_netval(this->new_player_info_.ci_.x_, ptr);
    conv::to_netval(this->new_player_info_.ci_.y_, ptr);
    *( (uint8_t*)ptr ) = this->new_player_info_.ci_.move_type_, ++ptr;
    *( (uint8_t*)ptr ) = this->new_player_info_.ci_.direction_, ++ptr;
    *( (uint8_t*)ptr ) = this->new_player_info_.ci_.ready_state_, ++ptr;
    *( (uint8_t*)ptr ) = this->new_player_info_.si_.level_, ++ptr;
    conv::to_netval(this->new_player_info_.si_.level_cur_exp_, ptr);
    conv::to_netval(this->new_player_info_.si_.levelup_total_exp_, ptr);
    conv::to_netval(this->new_player_info_.si_.history_highest_round_exp_, ptr);
    conv::to_netval(this->new_player_info_.si_.history_highest_round_gold_, ptr);
    conv::to_netval(this->new_player_info_.si_.total_gold_, ptr);
    conv::to_netval(this->new_player_info_.si_.gold_capacity_, ptr);
    conv::to_netval(this->new_player_info_.si_.evalue_, ptr);
    conv::to_netval(this->new_player_info_.si_.evalue_toplimit_, ptr);
    *( (uint8_t*)ptr ) = this->new_player_info_.si_.index_in_room_, ++ptr;
    *( (uint8_t*)ptr ) = this->new_player_info_.si_.service_count_, ++ptr;
    for(uint8_t service_infos_index = 0; service_infos_index < this->new_player_info_.si_.service_count_ && service_infos_index < 9; ++service_infos_index)
    {
        conv::to_netval(this->new_player_info_.si_.service_infos_[service_infos_index].item_id_, ptr);
        conv::to_netval(this->new_player_info_.si_.service_infos_[service_infos_index].item_pay_type_, ptr);
    }
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_enter_room_information::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->new_player_info_.ci_.id_, ptr);
    conv::to_hostval(this->new_player_info_.ci_.name_, ptr, 16);
    this->new_player_info_.ci_.role_id_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->new_player_info_.ci_.x_, ptr);
    conv::to_hostval(this->new_player_info_.ci_.y_, ptr);
    this->new_player_info_.ci_.move_type_ = *( (uint8_t*)ptr ), ++ptr;
    this->new_player_info_.ci_.direction_ = *( (uint8_t*)ptr ), ++ptr;
    this->new_player_info_.ci_.ready_state_ = *( (uint8_t*)ptr ), ++ptr;
    this->new_player_info_.si_.level_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->new_player_info_.si_.level_cur_exp_, ptr);
    conv::to_hostval(this->new_player_info_.si_.levelup_total_exp_, ptr);
    conv::to_hostval(this->new_player_info_.si_.history_highest_round_exp_, ptr);
    conv::to_hostval(this->new_player_info_.si_.history_highest_round_gold_, ptr);
    conv::to_hostval(this->new_player_info_.si_.total_gold_, ptr);
    conv::to_hostval(this->new_player_info_.si_.gold_capacity_, ptr);
    conv::to_hostval(this->new_player_info_.si_.evalue_, ptr);
    conv::to_hostval(this->new_player_info_.si_.evalue_toplimit_, ptr);
    this->new_player_info_.si_.index_in_room_ = *( (uint8_t*)ptr ), ++ptr;
    this->new_player_info_.si_.service_count_ = *( (uint8_t*)ptr ), ++ptr;
    for(uint8_t service_infos_index = 0; service_infos_index < this->new_player_info_.si_.service_count_ && service_infos_index < 9; ++service_infos_index)
    {
        conv::to_hostval(this->new_player_info_.si_.service_infos_[service_infos_index].item_id_, ptr);
        conv::to_hostval(this->new_player_info_.si_.service_infos_[service_infos_index].item_pay_type_, ptr);
    }
}

std::string player_enter_room_information::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_enter_room_information:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("id_", this->new_player_info_.ci_.id_ << '\n', '-');
    ss << strfmt("name_", this->new_player_info_.ci_.name_ << '\n', '-');
    ss << strfmt("role_id_", (int)this->new_player_info_.ci_.role_id_ << '\n', '-');
    ss << strfmt("x_", this->new_player_info_.ci_.x_ << '\n', '-');
    ss << strfmt("y_", this->new_player_info_.ci_.y_ << '\n', '-');
    ss << strfmt("move_type_", (int)this->new_player_info_.ci_.move_type_ << '\n', '-');
    ss << strfmt("direction_", (int)this->new_player_info_.ci_.direction_ << '\n', '-');
    ss << strfmt("ready_state_", (int)this->new_player_info_.ci_.ready_state_ << '\n', '-');
    ss << strfmt("level_", (int)this->new_player_info_.si_.level_ << '\n', '-');
    ss << strfmt("level_cur_exp_", this->new_player_info_.si_.level_cur_exp_ << '\n', '-');
    ss << strfmt("levelup_total_exp_", this->new_player_info_.si_.levelup_total_exp_ << '\n', '-');
    ss << strfmt("history_highest_round_exp_", this->new_player_info_.si_.history_highest_round_exp_ << '\n', '-');
    ss << strfmt("history_highest_round_gold_", this->new_player_info_.si_.history_highest_round_gold_ << '\n', '-');
    ss << strfmt("total_gold_", this->new_player_info_.si_.total_gold_ << '\n', '-');
    ss << strfmt("gold_capacity_", this->new_player_info_.si_.gold_capacity_ << '\n', '-');
    ss << strfmt("evalue_", this->new_player_info_.si_.evalue_ << '\n', '-');
    ss << strfmt("evalue_toplimit_", this->new_player_info_.si_.evalue_toplimit_ << '\n', '-');
    ss << strfmt("index_in_room_", (int)this->new_player_info_.si_.index_in_room_ << '\n', '-');
    ss << strfmt("service_count_", (int)this->new_player_info_.si_.service_count_ << '\n', '-');
    for(uint8_t service_infos_index = 0; service_infos_index < this->new_player_info_.si_.service_count_ && service_infos_index < 9; ++service_infos_index)
    {
        ss << "this->new_player_info_.si_.service_infos_[" << service_infos_index << "]: \n";
        ss << strfmt("item_id_", this->new_player_info_.si_.service_infos_[service_infos_index].item_id_ << '\n', '-');
        ss << strfmt("item_pay_type_", this->new_player_info_.si_.service_infos_[service_infos_index].item_pay_type_ << '\n', '-');
    }
    return ss.str();
}

player_move_request::player_move_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 8;
}

void player_move_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->player_id_, ptr);
    *( (uint8_t*)ptr ) = this->move_type_, ++ptr;
    conv::to_netval(this->new_x_, ptr);
    conv::to_netval(this->new_y_, ptr);
    *( (uint8_t*)ptr ) = this->direction_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_move_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->player_id_, ptr);
    this->move_type_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->new_x_, ptr);
    conv::to_hostval(this->new_y_, ptr);
    this->direction_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_move_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_move_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("player_id_", this->player_id_ << '\n', '-');
    ss << strfmt("move_type_", (int)this->move_type_ << '\n', '-');
    ss << strfmt("new_x_", this->new_x_ << '\n', '-');
    ss << strfmt("new_y_", this->new_y_ << '\n', '-');
    ss << strfmt("direction_", (int)this->direction_ << '\n', '-');
    return ss.str();
}

player_move_response::player_move_response(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 9;
}

void player_move_response::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_move_response::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
}

std::string player_move_response::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_move_response:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    return ss.str();
}

player_move_information::player_move_information(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 10;
}

void player_move_information::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->player_id_, ptr);
    *( (uint8_t*)ptr ) = this->move_type_, ++ptr;
    conv::to_netval(this->new_x_, ptr);
    conv::to_netval(this->new_y_, ptr);
    *( (uint8_t*)ptr ) = this->direction_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_move_information::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->player_id_, ptr);
    this->move_type_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->new_x_, ptr);
    conv::to_hostval(this->new_y_, ptr);
    this->direction_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_move_information::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_move_information:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("player_id_", this->player_id_ << '\n', '-');
    ss << strfmt("move_type_", (int)this->move_type_ << '\n', '-');
    ss << strfmt("new_x_", this->new_x_ << '\n', '-');
    ss << strfmt("new_y_", this->new_y_ << '\n', '-');
    ss << strfmt("direction_", (int)this->direction_ << '\n', '-');
    return ss.str();
}

player_use_item_request::player_use_item_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 11;
}

void player_use_item_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->item_issuer_iir_, ++ptr;
    conv::to_netval(this->item_widget_id_, ptr);
    conv::to_netval(this->item_serial_number_, ptr);
    conv::to_netval(this->item_issue_x_, ptr);
    conv::to_netval(this->item_issue_y_, ptr);
    *( (uint8_t*)ptr ) = this->item_issue_direction_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_use_item_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->item_issuer_iir_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->item_widget_id_, ptr);
    conv::to_hostval(this->item_serial_number_, ptr);
    conv::to_hostval(this->item_issue_x_, ptr);
    conv::to_hostval(this->item_issue_y_, ptr);
    this->item_issue_direction_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_use_item_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_use_item_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("item_issuer_iir_", (int)this->item_issuer_iir_ << '\n', '-');
    ss << strfmt("item_widget_id_", this->item_widget_id_ << '\n', '-');
    ss << strfmt("item_serial_number_", this->item_serial_number_ << '\n', '-');
    ss << strfmt("item_issue_x_", this->item_issue_x_ << '\n', '-');
    ss << strfmt("item_issue_y_", this->item_issue_y_ << '\n', '-');
    ss << strfmt("item_issue_direction_", (int)this->item_issue_direction_ << '\n', '-');
    return ss.str();
}

player_use_item_information::player_use_item_information(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 12;
}

void player_use_item_information::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->item_issuer_iir_, ++ptr;
    conv::to_netval(this->item_widget_id_, ptr);
    conv::to_netval(this->item_serial_number_, ptr);
    conv::to_netval(this->item_issue_x_, ptr);
    conv::to_netval(this->item_issue_y_, ptr);
    *( (uint8_t*)ptr ) = this->item_issue_direction_, ++ptr;
    conv::to_netval(this->item_issuer_evalue_cost_, ptr);
    conv::to_netval(this->item_issuer_reality_evalue_, ptr);
    *( (uint8_t*)ptr ) = this->use_item_retcode_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_use_item_information::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->item_issuer_iir_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->item_widget_id_, ptr);
    conv::to_hostval(this->item_serial_number_, ptr);
    conv::to_hostval(this->item_issue_x_, ptr);
    conv::to_hostval(this->item_issue_y_, ptr);
    this->item_issue_direction_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->item_issuer_evalue_cost_, ptr);
    conv::to_hostval(this->item_issuer_reality_evalue_, ptr);
    this->use_item_retcode_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_use_item_information::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_use_item_information:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("item_issuer_iir_", (int)this->item_issuer_iir_ << '\n', '-');
    ss << strfmt("item_widget_id_", this->item_widget_id_ << '\n', '-');
    ss << strfmt("item_serial_number_", this->item_serial_number_ << '\n', '-');
    ss << strfmt("item_issue_x_", this->item_issue_x_ << '\n', '-');
    ss << strfmt("item_issue_y_", this->item_issue_y_ << '\n', '-');
    ss << strfmt("item_issue_direction_", (int)this->item_issue_direction_ << '\n', '-');
    ss << strfmt("item_issuer_evalue_cost_", this->item_issuer_evalue_cost_ << '\n', '-');
    ss << strfmt("item_issuer_reality_evalue_", this->item_issuer_reality_evalue_ << '\n', '-');
    ss << strfmt("use_item_retcode_", (int)this->use_item_retcode_ << '\n', '-');
    return ss.str();
}

issuing_item_collision_info::issuing_item_collision_info(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 33;
}

void issuing_item_collision_info::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->item_issuer_iir_, ++ptr;
    *( (uint8_t*)ptr ) = this->item_hitter_iir_, ++ptr;
    conv::to_netval(this->item_widget_id_, ptr);
    conv::to_netval(this->item_serial_number_, ptr);
    conv::to_netval(this->item_collision_x_, ptr);
    conv::to_netval(this->item_collision_y_, ptr);
    conv::to_netval(this->item_collision_angle_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void issuing_item_collision_info::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->item_issuer_iir_ = *( (uint8_t*)ptr ), ++ptr;
    this->item_hitter_iir_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->item_widget_id_, ptr);
    conv::to_hostval(this->item_serial_number_, ptr);
    conv::to_hostval(this->item_collision_x_, ptr);
    conv::to_hostval(this->item_collision_y_, ptr);
    conv::to_hostval(this->item_collision_angle_, ptr);
}

std::string issuing_item_collision_info::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "issuing_item_collision_info:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("item_issuer_iir_", (int)this->item_issuer_iir_ << '\n', '-');
    ss << strfmt("item_hitter_iir_", (int)this->item_hitter_iir_ << '\n', '-');
    ss << strfmt("item_widget_id_", this->item_widget_id_ << '\n', '-');
    ss << strfmt("item_serial_number_", this->item_serial_number_ << '\n', '-');
    ss << strfmt("item_collision_x_", this->item_collision_x_ << '\n', '-');
    ss << strfmt("item_collision_y_", this->item_collision_y_ << '\n', '-');
    ss << strfmt("item_collision_angle_", this->item_collision_angle_ << '\n', '-');
    return ss.str();
}

player_use_item_result::player_use_item_result(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 13;
}

void player_use_item_result::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->item_issuer_iir_, ++ptr;
    *( (uint8_t*)ptr ) = this->item_hitter_iir_, ++ptr;
    conv::to_netval(this->item_widget_id_, ptr);
    conv::to_netval(this->item_serial_number_, ptr);
    conv::to_netval(this->item_collision_x_, ptr);
    conv::to_netval(this->item_collision_y_, ptr);
    conv::to_netval(this->item_collision_angle_, ptr);
    conv::to_netval(this->item_issuer_gold_bounty_, ptr);
    conv::to_netval(this->item_issuer_cur_round_gold_, ptr);
    conv::to_netval(this->item_issuer_cur_total_gold_, ptr);
    *( (uint8_t*)ptr ) = this->item_valid_range_player_count_, ++ptr;
    for(uint8_t item_valid_range_players_index = 0; item_valid_range_players_index < this->item_valid_range_player_count_ && item_valid_range_players_index < 6; ++item_valid_range_players_index)
    {
        conv::to_netval(this->item_valid_range_players_[item_valid_range_players_index].player_id_, ptr);
        *( (uint8_t*)ptr ) = this->item_valid_range_players_[item_valid_range_players_index].dodge_code_, ++ptr;
        conv::to_netval(this->item_valid_range_players_[item_valid_range_players_index].injured_comfort_evalue_, ptr);
    }
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_use_item_result::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->item_issuer_iir_ = *( (uint8_t*)ptr ), ++ptr;
    this->item_hitter_iir_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->item_widget_id_, ptr);
    conv::to_hostval(this->item_serial_number_, ptr);
    conv::to_hostval(this->item_collision_x_, ptr);
    conv::to_hostval(this->item_collision_y_, ptr);
    conv::to_hostval(this->item_collision_angle_, ptr);
    conv::to_hostval(this->item_issuer_gold_bounty_, ptr);
    conv::to_hostval(this->item_issuer_cur_round_gold_, ptr);
    conv::to_hostval(this->item_issuer_cur_total_gold_, ptr);
    this->item_valid_range_player_count_ = *( (uint8_t*)ptr ), ++ptr;
    for(uint8_t item_valid_range_players_index = 0; item_valid_range_players_index < this->item_valid_range_player_count_ && item_valid_range_players_index < 6; ++item_valid_range_players_index)
    {
        conv::to_hostval(this->item_valid_range_players_[item_valid_range_players_index].player_id_, ptr);
        this->item_valid_range_players_[item_valid_range_players_index].dodge_code_ = *( (uint8_t*)ptr ), ++ptr;
        conv::to_hostval(this->item_valid_range_players_[item_valid_range_players_index].injured_comfort_evalue_, ptr);
    }
}

std::string player_use_item_result::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_use_item_result:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("item_issuer_iir_", (int)this->item_issuer_iir_ << '\n', '-');
    ss << strfmt("item_hitter_iir_", (int)this->item_hitter_iir_ << '\n', '-');
    ss << strfmt("item_widget_id_", this->item_widget_id_ << '\n', '-');
    ss << strfmt("item_serial_number_", this->item_serial_number_ << '\n', '-');
    ss << strfmt("item_collision_x_", this->item_collision_x_ << '\n', '-');
    ss << strfmt("item_collision_y_", this->item_collision_y_ << '\n', '-');
    ss << strfmt("item_collision_angle_", this->item_collision_angle_ << '\n', '-');
    ss << strfmt("item_issuer_gold_bounty_", this->item_issuer_gold_bounty_ << '\n', '-');
    ss << strfmt("item_issuer_cur_round_gold_", this->item_issuer_cur_round_gold_ << '\n', '-');
    ss << strfmt("item_issuer_cur_total_gold_", this->item_issuer_cur_total_gold_ << '\n', '-');
    ss << strfmt("item_valid_range_player_count_", (int)this->item_valid_range_player_count_ << '\n', '-');
    for(uint8_t item_valid_range_players_index = 0; item_valid_range_players_index < this->item_valid_range_player_count_ && item_valid_range_players_index < 6; ++item_valid_range_players_index)
    {
        ss << "this->item_valid_range_players_[" << item_valid_range_players_index << "]: \n";
        ss << strfmt("player_id_", this->item_valid_range_players_[item_valid_range_players_index].player_id_ << '\n', '-');
        ss << strfmt("dodge_code_", (int)this->item_valid_range_players_[item_valid_range_players_index].dodge_code_ << '\n', '-');
        ss << strfmt("injured_comfort_evalue_", this->item_valid_range_players_[item_valid_range_players_index].injured_comfort_evalue_ << '\n', '-');
    }
    return ss.str();
}

widget_collision_request::widget_collision_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 14;
}

void widget_collision_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->widget_id_, ptr);
    conv::to_netval(this->widget_serial_number_, ptr);
    conv::to_netval(this->widget_x_, ptr);
    conv::to_netval(this->widget_y_, ptr);
    conv::to_netval(this->widget_collision_player_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void widget_collision_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->widget_id_, ptr);
    conv::to_hostval(this->widget_serial_number_, ptr);
    conv::to_hostval(this->widget_x_, ptr);
    conv::to_hostval(this->widget_y_, ptr);
    conv::to_hostval(this->widget_collision_player_, ptr);
}

std::string widget_collision_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "widget_collision_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("widget_id_", this->widget_id_ << '\n', '-');
    ss << strfmt("widget_serial_number_", this->widget_serial_number_ << '\n', '-');
    ss << strfmt("widget_x_", this->widget_x_ << '\n', '-');
    ss << strfmt("widget_y_", this->widget_y_ << '\n', '-');
    ss << strfmt("widget_collision_player_", this->widget_collision_player_ << '\n', '-');
    return ss.str();
}

widget_collision_information::widget_collision_information(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 16;
}

void widget_collision_information::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->widget_id_, ptr);
    conv::to_netval(this->widget_serial_number_, ptr);
    conv::to_netval(this->widget_x_, ptr);
    conv::to_netval(this->widget_y_, ptr);
    conv::to_netval(this->widget_collision_player_, ptr);
    *( (bool*)ptr ) = this->succeed_, ++ptr;
    conv::to_netval(this->wcp_exp_plus_, ptr);
    conv::to_netval(this->wcp_level_cur_exp_, ptr);
    conv::to_netval(this->wcp_levelup_total_exp_, ptr);
    conv::to_netval(this->wcp_cur_round_exp_, ptr);
    conv::to_netval(this->wcp_evalue_plus_, ptr);
    conv::to_netval(this->wcp_cur_evalue_, ptr);
    conv::to_netval(this->wcp_evalue_toplimit_, ptr);
    conv::to_netval(this->wcp_gold_plus_, ptr);
    conv::to_netval(this->wcp_cur_round_gold_, ptr);
    conv::to_netval(this->wcp_cur_total_gold_, ptr);
    conv::to_netval(this->wcp_gold_capacity_, ptr);
    conv::to_netval(this->seq_got_same_widget_times_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void widget_collision_information::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->widget_id_, ptr);
    conv::to_hostval(this->widget_serial_number_, ptr);
    conv::to_hostval(this->widget_x_, ptr);
    conv::to_hostval(this->widget_y_, ptr);
    conv::to_hostval(this->widget_collision_player_, ptr);
    this->succeed_ = *( (bool*)ptr ), ++ptr;
    conv::to_hostval(this->wcp_exp_plus_, ptr);
    conv::to_hostval(this->wcp_level_cur_exp_, ptr);
    conv::to_hostval(this->wcp_levelup_total_exp_, ptr);
    conv::to_hostval(this->wcp_cur_round_exp_, ptr);
    conv::to_hostval(this->wcp_evalue_plus_, ptr);
    conv::to_hostval(this->wcp_cur_evalue_, ptr);
    conv::to_hostval(this->wcp_evalue_toplimit_, ptr);
    conv::to_hostval(this->wcp_gold_plus_, ptr);
    conv::to_hostval(this->wcp_cur_round_gold_, ptr);
    conv::to_hostval(this->wcp_cur_total_gold_, ptr);
    conv::to_hostval(this->wcp_gold_capacity_, ptr);
    conv::to_hostval(this->seq_got_same_widget_times_, ptr);
}

std::string widget_collision_information::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "widget_collision_information:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("widget_id_", this->widget_id_ << '\n', '-');
    ss << strfmt("widget_serial_number_", this->widget_serial_number_ << '\n', '-');
    ss << strfmt("widget_x_", this->widget_x_ << '\n', '-');
    ss << strfmt("widget_y_", this->widget_y_ << '\n', '-');
    ss << strfmt("widget_collision_player_", this->widget_collision_player_ << '\n', '-');
    ss << strfmt("succeed_", (int)this->succeed_ << '\n', '-');
    ss << strfmt("wcp_exp_plus_", this->wcp_exp_plus_ << '\n', '-');
    ss << strfmt("wcp_level_cur_exp_", this->wcp_level_cur_exp_ << '\n', '-');
    ss << strfmt("wcp_levelup_total_exp_", this->wcp_levelup_total_exp_ << '\n', '-');
    ss << strfmt("wcp_cur_round_exp_", this->wcp_cur_round_exp_ << '\n', '-');
    ss << strfmt("wcp_evalue_plus_", this->wcp_evalue_plus_ << '\n', '-');
    ss << strfmt("wcp_cur_evalue_", this->wcp_cur_evalue_ << '\n', '-');
    ss << strfmt("wcp_evalue_toplimit_", this->wcp_evalue_toplimit_ << '\n', '-');
    ss << strfmt("wcp_gold_plus_", this->wcp_gold_plus_ << '\n', '-');
    ss << strfmt("wcp_cur_round_gold_", this->wcp_cur_round_gold_ << '\n', '-');
    ss << strfmt("wcp_cur_total_gold_", this->wcp_cur_total_gold_ << '\n', '-');
    ss << strfmt("wcp_gold_capacity_", this->wcp_gold_capacity_ << '\n', '-');
    ss << strfmt("seq_got_same_widget_times_", this->seq_got_same_widget_times_ << '\n', '-');
    return ss.str();
}

player_exit_room_request::player_exit_room_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 18;
}

void player_exit_room_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->index_in_room_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_exit_room_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->index_in_room_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_exit_room_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_exit_room_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("index_in_room_", (int)this->index_in_room_ << '\n', '-');
    return ss.str();
}

player_exit_room_information::player_exit_room_information(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 19;
}

void player_exit_room_information::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->player_id_, ptr);
    *( (uint8_t*)ptr ) = this->reason_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_exit_room_information::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->player_id_, ptr);
    this->reason_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_exit_room_information::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_exit_room_information:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("player_id_", this->player_id_ << '\n', '-');
    ss << strfmt("reason_", (int)this->reason_ << '\n', '-');
    return ss.str();
}

player_chat_message::player_chat_message(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 20;
}

void player_chat_message::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->sender_, ptr);
    conv::to_netval(this->receiver_, ptr);
    conv::to_netval(this->chat_len_, ptr);
    conv::to_netval(this->chat_content_, ptr, this->chat_len_ <= 499 ? this->chat_len_ : 499);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_chat_message::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->sender_, ptr);
    conv::to_hostval(this->receiver_, ptr);
    conv::to_hostval(this->chat_len_, ptr);
    conv::to_hostval(this->chat_content_, ptr, this->chat_len_ <= 499 ? this->chat_len_ : 499);
}

std::string player_chat_message::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_chat_message:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("sender_", this->sender_ << '\n', '-');
    ss << strfmt("receiver_", this->receiver_ << '\n', '-');
    ss << strfmt("chat_len_", this->chat_len_ << '\n', '-');
    ss << strfmt("chat_content_", this->chat_content_ << '\n', '-');
    return ss.str();
}

player_change_ready_request::player_change_ready_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 25;
}

void player_change_ready_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->index_in_room_, ++ptr;
    *( (uint8_t*)ptr ) = this->new_ready_state_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_change_ready_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->index_in_room_ = *( (uint8_t*)ptr ), ++ptr;
    this->new_ready_state_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_change_ready_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_change_ready_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("index_in_room_", (int)this->index_in_room_ << '\n', '-');
    ss << strfmt("new_ready_state_", (int)this->new_ready_state_ << '\n', '-');
    return ss.str();
}

player_change_ready_response::player_change_ready_response(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 26;
}

void player_change_ready_response::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->retcode_, ++ptr;
    *( (uint8_t*)ptr ) = this->new_ready_state_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_change_ready_response::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->retcode_ = *( (uint8_t*)ptr ), ++ptr;
    this->new_ready_state_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_change_ready_response::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_change_ready_response:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("retcode_", (int)this->retcode_ << '\n', '-');
    ss << strfmt("new_ready_state_", (int)this->new_ready_state_ << '\n', '-');
    return ss.str();
}

player_change_ready_info::player_change_ready_info(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 34;
}

void player_change_ready_info::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->player_id_, ptr);
    *( (uint8_t*)ptr ) = this->new_ready_state_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_change_ready_info::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->player_id_, ptr);
    this->new_ready_state_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_change_ready_info::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_change_ready_info:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("player_id_", this->player_id_ << '\n', '-');
    ss << strfmt("new_ready_state_", (int)this->new_ready_state_ << '\n', '-');
    return ss.str();
}

player_hall_update_request::player_hall_update_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 28;
}

void player_hall_update_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->new_hall_id_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_hall_update_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->new_hall_id_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_hall_update_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_hall_update_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("new_hall_id_", (int)this->new_hall_id_ << '\n', '-');
    return ss.str();
}

player_hall_update_response::player_hall_update_response(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 29;
}

void player_hall_update_response::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (bool*)ptr ) = this->succeed_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_hall_update_response::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->succeed_ = *( (bool*)ptr ), ++ptr;
}

std::string player_hall_update_response::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_hall_update_response:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("succeed_", (int)this->succeed_ << '\n', '-');
    return ss.str();
}

game_start_information::game_start_information(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 30;
}

void game_start_information::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->second_, ++ptr;
    *( (uint8_t*)ptr ) = this->player_count_, ++ptr;
    for(uint8_t player_service_infos_index = 0; player_service_infos_index < this->player_count_ && player_service_infos_index < 6; ++player_service_infos_index)
    {
        conv::to_netval(this->player_service_infos_[player_service_infos_index].player_id_, ptr);
        *( (uint8_t*)ptr ) = this->player_service_infos_[player_service_infos_index].service_count_, ++ptr;
        for(uint8_t service_infos_index = 0; service_infos_index < this->player_service_infos_[player_service_infos_index].service_count_ && service_infos_index < 9; ++service_infos_index)
        {
            conv::to_netval(this->player_service_infos_[player_service_infos_index].service_infos_[service_infos_index].item_id_, ptr);
            conv::to_netval(this->player_service_infos_[player_service_infos_index].service_infos_[service_infos_index].item_pay_type_, ptr);
        }
    }
    conv::to_netval(this->widgets_drop_speed_, ptr);
    conv::to_netval(this->drop_widget_count_, ptr);
    if(this->drop_widget_count_ != 0) assert(this->drop_widget_infos_!= nullptr);
    for(uint32_t drop_widget_infos_index = 0; drop_widget_infos_index < this->drop_widget_count_; ++drop_widget_infos_index)
    {
        conv::to_netval(this->drop_widget_infos_[drop_widget_infos_index].widget_id_, ptr);
        conv::to_netval(this->drop_widget_infos_[drop_widget_infos_index].widget_x_, ptr);
        conv::to_netval(this->drop_widget_infos_[drop_widget_infos_index].widget_serial_number_, ptr);
    }
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void game_start_information::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->second_ = *( (uint8_t*)ptr ), ++ptr;
    this->player_count_ = *( (uint8_t*)ptr ), ++ptr;
    for(uint8_t player_service_infos_index = 0; player_service_infos_index < this->player_count_ && player_service_infos_index < 6; ++player_service_infos_index)
    {
        conv::to_hostval(this->player_service_infos_[player_service_infos_index].player_id_, ptr);
        this->player_service_infos_[player_service_infos_index].service_count_ = *( (uint8_t*)ptr ), ++ptr;
        for(uint8_t service_infos_index = 0; service_infos_index < this->player_service_infos_[player_service_infos_index].service_count_ && service_infos_index < 9; ++service_infos_index)
        {
            conv::to_hostval(this->player_service_infos_[player_service_infos_index].service_infos_[service_infos_index].item_id_, ptr);
            conv::to_hostval(this->player_service_infos_[player_service_infos_index].service_infos_[service_infos_index].item_pay_type_, ptr);
        }
    }
    conv::to_hostval(this->widgets_drop_speed_, ptr);
    conv::to_hostval(this->drop_widget_count_, ptr);
    if(this->drop_widget_count_ != 0) assert(this->drop_widget_infos_!= nullptr);
    for(uint32_t drop_widget_infos_index = 0; drop_widget_infos_index < this->drop_widget_count_; ++drop_widget_infos_index)
    {
        conv::to_hostval(this->drop_widget_infos_[drop_widget_infos_index].widget_id_, ptr);
        conv::to_hostval(this->drop_widget_infos_[drop_widget_infos_index].widget_x_, ptr);
        conv::to_hostval(this->drop_widget_infos_[drop_widget_infos_index].widget_serial_number_, ptr);
    }
}

std::string game_start_information::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "game_start_information:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("second_", (int)this->second_ << '\n', '-');
    ss << strfmt("player_count_", (int)this->player_count_ << '\n', '-');
    for(uint8_t player_service_infos_index = 0; player_service_infos_index < this->player_count_ && player_service_infos_index < 6; ++player_service_infos_index)
    {
        ss << "this->player_service_infos_[" << player_service_infos_index << "]: \n";
        ss << strfmt("player_id_", this->player_service_infos_[player_service_infos_index].player_id_ << '\n', '-');
        ss << strfmt("service_count_", (int)this->player_service_infos_[player_service_infos_index].service_count_ << '\n', '-');
        for(uint8_t service_infos_index = 0; service_infos_index < this->player_service_infos_[player_service_infos_index].service_count_ && service_infos_index < 9; ++service_infos_index)
        {
            ss << "this->player_service_infos_[player_service_infos_index].service_infos_[" << service_infos_index << "]: \n";
            ss << strfmt("item_id_", this->player_service_infos_[player_service_infos_index].service_infos_[service_infos_index].item_id_ << '\n', '-');
            ss << strfmt("item_pay_type_", this->player_service_infos_[player_service_infos_index].service_infos_[service_infos_index].item_pay_type_ << '\n', '-');
        }
    }
    ss << strfmt("widgets_drop_speed_", this->widgets_drop_speed_ << '\n', '-');
    ss << strfmt("drop_widget_count_", this->drop_widget_count_ << '\n', '-');
    if(this->drop_widget_count_ != 0) assert(this->drop_widget_infos_!= nullptr);
    for(uint32_t drop_widget_infos_index = 0; drop_widget_infos_index < this->drop_widget_count_; ++drop_widget_infos_index)
    {
        ss << "this->drop_widget_infos_[" << drop_widget_infos_index << "]: \n";
        ss << strfmt("widget_id_", this->drop_widget_infos_[drop_widget_infos_index].widget_id_ << '\n', '-');
        ss << strfmt("widget_x_", this->drop_widget_infos_[drop_widget_infos_index].widget_x_ << '\n', '-');
        ss << strfmt("widget_serial_number_", this->drop_widget_infos_[drop_widget_infos_index].widget_serial_number_ << '\n', '-');
    }
    return ss.str();
}

item_donate_for_player::item_donate_for_player(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 131;
}

void item_donate_for_player::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->donate_item_count_, ptr);
    if(this->donate_item_count_ != 0) assert(this->donate_item_infos_!= nullptr);
    for(uint16_t donate_item_infos_index = 0; donate_item_infos_index < this->donate_item_count_; ++donate_item_infos_index)
    {
        conv::to_netval(this->donate_item_infos_[donate_item_infos_index].item_widget_id_, ptr);
        conv::to_netval(this->donate_item_infos_[donate_item_infos_index].item_serial_number, ptr);
    }
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void item_donate_for_player::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->donate_item_count_, ptr);
    if(this->donate_item_count_ != 0) assert(this->donate_item_infos_!= nullptr);
    for(uint16_t donate_item_infos_index = 0; donate_item_infos_index < this->donate_item_count_; ++donate_item_infos_index)
    {
        conv::to_hostval(this->donate_item_infos_[donate_item_infos_index].item_widget_id_, ptr);
        conv::to_hostval(this->donate_item_infos_[donate_item_infos_index].item_serial_number, ptr);
    }
}

std::string item_donate_for_player::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "item_donate_for_player:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("donate_item_count_", this->donate_item_count_ << '\n', '-');
    if(this->donate_item_count_ != 0) assert(this->donate_item_infos_!= nullptr);
    for(uint16_t donate_item_infos_index = 0; donate_item_infos_index < this->donate_item_count_; ++donate_item_infos_index)
    {
        ss << "this->donate_item_infos_[" << donate_item_infos_index << "]: \n";
        ss << strfmt("item_widget_id_", this->donate_item_infos_[donate_item_infos_index].item_widget_id_ << '\n', '-');
        ss << strfmt("item_serial_number", this->donate_item_infos_[donate_item_infos_index].item_serial_number << '\n', '-');
    }
    return ss.str();
}

game_end_information::game_end_information(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 32;
}

void game_end_information::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->best_player_gold_award_, ptr);
    conv::to_netval(this->best_player_exp_award_, ptr);
    conv::to_netval(this->best_player_id_, ptr);
    *( (uint8_t*)ptr ) = this->player_count_, ++ptr;
    for(uint8_t player_game_results_index = 0; player_game_results_index < this->player_count_ && player_game_results_index < 6; ++player_game_results_index)
    {
        conv::to_netval(this->player_game_results_[player_game_results_index].player_id_, ptr);
        *( (uint8_t*)ptr ) = this->player_game_results_[player_game_results_index].player_level_, ++ptr;
        conv::to_netval(this->player_game_results_[player_game_results_index].player_level_cur_exp_, ptr);
        conv::to_netval(this->player_game_results_[player_game_results_index].player_levelup_total_exp_, ptr);
        conv::to_netval(this->player_game_results_[player_game_results_index].player_round_exp_, ptr);
        conv::to_netval(this->player_game_results_[player_game_results_index].player_round_gold_, ptr);
        conv::to_netval(this->player_game_results_[player_game_results_index].player_total_gold_, ptr);
        conv::to_netval(this->player_game_results_[player_game_results_index].player_hall_mark_up_gold_, ptr);
        conv::to_netval(this->player_game_results_[player_game_results_index].player_hall_mark_up_exp_, ptr);
        conv::to_netval(this->player_game_results_[player_game_results_index].player_evalue_toplimit_, ptr);
    }
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void game_end_information::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->best_player_gold_award_, ptr);
    conv::to_hostval(this->best_player_exp_award_, ptr);
    conv::to_hostval(this->best_player_id_, ptr);
    this->player_count_ = *( (uint8_t*)ptr ), ++ptr;
    for(uint8_t player_game_results_index = 0; player_game_results_index < this->player_count_ && player_game_results_index < 6; ++player_game_results_index)
    {
        conv::to_hostval(this->player_game_results_[player_game_results_index].player_id_, ptr);
        this->player_game_results_[player_game_results_index].player_level_ = *( (uint8_t*)ptr ), ++ptr;
        conv::to_hostval(this->player_game_results_[player_game_results_index].player_level_cur_exp_, ptr);
        conv::to_hostval(this->player_game_results_[player_game_results_index].player_levelup_total_exp_, ptr);
        conv::to_hostval(this->player_game_results_[player_game_results_index].player_round_exp_, ptr);
        conv::to_hostval(this->player_game_results_[player_game_results_index].player_round_gold_, ptr);
        conv::to_hostval(this->player_game_results_[player_game_results_index].player_total_gold_, ptr);
        conv::to_hostval(this->player_game_results_[player_game_results_index].player_hall_mark_up_gold_, ptr);
        conv::to_hostval(this->player_game_results_[player_game_results_index].player_hall_mark_up_exp_, ptr);
        conv::to_hostval(this->player_game_results_[player_game_results_index].player_evalue_toplimit_, ptr);
    }
}

std::string game_end_information::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "game_end_information:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("best_player_gold_award_", this->best_player_gold_award_ << '\n', '-');
    ss << strfmt("best_player_exp_award_", this->best_player_exp_award_ << '\n', '-');
    ss << strfmt("best_player_id_", this->best_player_id_ << '\n', '-');
    ss << strfmt("player_count_", (int)this->player_count_ << '\n', '-');
    for(uint8_t player_game_results_index = 0; player_game_results_index < this->player_count_ && player_game_results_index < 6; ++player_game_results_index)
    {
        ss << "this->player_game_results_[" << player_game_results_index << "]: \n";
        ss << strfmt("player_id_", this->player_game_results_[player_game_results_index].player_id_ << '\n', '-');
        ss << strfmt("player_level_", (int)this->player_game_results_[player_game_results_index].player_level_ << '\n', '-');
        ss << strfmt("player_level_cur_exp_", this->player_game_results_[player_game_results_index].player_level_cur_exp_ << '\n', '-');
        ss << strfmt("player_levelup_total_exp_", this->player_game_results_[player_game_results_index].player_levelup_total_exp_ << '\n', '-');
        ss << strfmt("player_round_exp_", this->player_game_results_[player_game_results_index].player_round_exp_ << '\n', '-');
        ss << strfmt("player_round_gold_", this->player_game_results_[player_game_results_index].player_round_gold_ << '\n', '-');
        ss << strfmt("player_total_gold_", this->player_game_results_[player_game_results_index].player_total_gold_ << '\n', '-');
        ss << strfmt("player_hall_mark_up_gold_", this->player_game_results_[player_game_results_index].player_hall_mark_up_gold_ << '\n', '-');
        ss << strfmt("player_hall_mark_up_exp_", this->player_game_results_[player_game_results_index].player_hall_mark_up_exp_ << '\n', '-');
        ss << strfmt("player_evalue_toplimit_", this->player_game_results_[player_game_results_index].player_evalue_toplimit_ << '\n', '-');
    }
    return ss.str();
}

player_heartbeat_request::player_heartbeat_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 128;
}

void player_heartbeat_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->sequence_number_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_heartbeat_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->sequence_number_, ptr);
}

std::string player_heartbeat_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_heartbeat_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("sequence_number_", this->sequence_number_ << '\n', '-');
    return ss.str();
}

player_heartbeat_response::player_heartbeat_response(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 129;
}

void player_heartbeat_response::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->sequence_number_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_heartbeat_response::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->sequence_number_, ptr);
}

std::string player_heartbeat_response::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_heartbeat_response:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("sequence_number_", this->sequence_number_ << '\n', '-');
    return ss.str();
}

new_player_logon_request::new_player_logon_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 134;
}

void new_player_logon_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    conv::to_netval(this->player_id_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void new_player_logon_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    conv::to_hostval(this->player_id_, ptr);
}

std::string new_player_logon_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "new_player_logon_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("player_id_", this->player_id_ << '\n', '-');
    return ss.str();
}

new_player_logon_response::new_player_logon_response(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 135;
}

void new_player_logon_response::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->heartbeat_interval_, ++ptr;
    *( (uint8_t*)ptr ) = this->logon_retcode_, ++ptr;
    conv::to_netval(this->item_use_cd_initial_, ptr);
    conv::to_netval(this->item_use_cd_min_, ptr);
    conv::to_netval(this->item_use_cd_reduce_, ptr);
    *( (uint8_t*)ptr ) = this->vip_item_cd_rebate_, ++ptr;
    *( (uint8_t*)ptr ) = this->vip_cost_rebate_, ++ptr;
    *( (uint8_t*)ptr ) = this->item_count_, ++ptr;
    if(this->item_count_ != 0) assert(this->item_cost_infos_!= nullptr);
    for(uint8_t item_cost_infos_index = 0; item_cost_infos_index < this->item_count_; ++item_cost_infos_index)
    {
        conv::to_netval(this->item_cost_infos_[item_cost_infos_index].item_id_, ptr);
        conv::to_netval(this->item_cost_infos_[item_cost_infos_index].item_evalue_cost_, ptr);
    }
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void new_player_logon_response::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->heartbeat_interval_ = *( (uint8_t*)ptr ), ++ptr;
    this->logon_retcode_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->item_use_cd_initial_, ptr);
    conv::to_hostval(this->item_use_cd_min_, ptr);
    conv::to_hostval(this->item_use_cd_reduce_, ptr);
    this->vip_item_cd_rebate_ = *( (uint8_t*)ptr ), ++ptr;
    this->vip_cost_rebate_ = *( (uint8_t*)ptr ), ++ptr;
    this->item_count_ = *( (uint8_t*)ptr ), ++ptr;
    if(this->item_count_ != 0) assert(this->item_cost_infos_!= nullptr);
    for(uint8_t item_cost_infos_index = 0; item_cost_infos_index < this->item_count_; ++item_cost_infos_index)
    {
        conv::to_hostval(this->item_cost_infos_[item_cost_infos_index].item_id_, ptr);
        conv::to_hostval(this->item_cost_infos_[item_cost_infos_index].item_evalue_cost_, ptr);
    }
}

std::string new_player_logon_response::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "new_player_logon_response:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("heartbeat_interval_", (int)this->heartbeat_interval_ << '\n', '-');
    ss << strfmt("logon_retcode_", (int)this->logon_retcode_ << '\n', '-');
    ss << strfmt("item_use_cd_initial_", this->item_use_cd_initial_ << '\n', '-');
    ss << strfmt("item_use_cd_min_", this->item_use_cd_min_ << '\n', '-');
    ss << strfmt("item_use_cd_reduce_", this->item_use_cd_reduce_ << '\n', '-');
    ss << strfmt("vip_item_cd_rebate_", (int)this->vip_item_cd_rebate_ << '\n', '-');
    ss << strfmt("vip_cost_rebate_", (int)this->vip_cost_rebate_ << '\n', '-');
    ss << strfmt("item_count_", (int)this->item_count_ << '\n', '-');
    if(this->item_count_ != 0) assert(this->item_cost_infos_!= nullptr);
    for(uint8_t item_cost_infos_index = 0; item_cost_infos_index < this->item_count_; ++item_cost_infos_index)
    {
        ss << "this->item_cost_infos_[" << item_cost_infos_index << "]: \n";
        ss << strfmt("item_id_", this->item_cost_infos_[item_cost_infos_index].item_id_ << '\n', '-');
        ss << strfmt("item_evalue_cost_", this->item_cost_infos_[item_cost_infos_index].item_evalue_cost_ << '\n', '-');
    }
    return ss.str();
}

later_player_logon_request::later_player_logon_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 132;
}

void later_player_logon_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (bool*)ptr ) = this->logon_forcibly_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void later_player_logon_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->logon_forcibly_ = *( (bool*)ptr ), ++ptr;
}

std::string later_player_logon_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "later_player_logon_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("logon_forcibly_", (int)this->logon_forcibly_ << '\n', '-');
    return ss.str();
}

later_player_logged_on_notify::later_player_logged_on_notify(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 133;
}

void later_player_logged_on_notify::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void later_player_logged_on_notify::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
}

std::string later_player_logged_on_notify::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "later_player_logged_on_notify:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    return ss.str();
}

player_effect_change_request::player_effect_change_request(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 136;
}

void player_effect_change_request::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->index_in_room_, ++ptr;
    *( (uint8_t*)ptr ) = this->effect_type_, ++ptr;
    conv::to_netval(this->effect_mask_, ptr);
    *( (uint8_t*)ptr ) = this->effect_status_, ++ptr;
    conv::to_netval(this->effect_duration_, ptr);
    *( (uint8_t*)ptr ) = this->effect_overlap_times_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_effect_change_request::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->index_in_room_ = *( (uint8_t*)ptr ), ++ptr;
    this->effect_type_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->effect_mask_, ptr);
    this->effect_status_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->effect_duration_, ptr);
    this->effect_overlap_times_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_effect_change_request::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_effect_change_request:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("index_in_room_", (int)this->index_in_room_ << '\n', '-');
    ss << strfmt("effect_type_", (int)this->effect_type_ << '\n', '-');
    ss << strfmt("effect_mask_", this->effect_mask_ << '\n', '-');
    ss << strfmt("effect_status_", (int)this->effect_status_ << '\n', '-');
    ss << strfmt("effect_duration_", this->effect_duration_ << '\n', '-');
    ss << strfmt("effect_overlap_times_", (int)this->effect_overlap_times_ << '\n', '-');
    return ss.str();
}

player_effect_change_info::player_effect_change_info(void)
{
    memset(this, 0x0, sizeof(*this));
    this->mt_ = 137;
}

void player_effect_change_info::encode(char* buffer, int& size)
{
    char* ptr = buffer;
    *( (uint8_t*)ptr ) = this->mt_, ++ptr;
    conv::to_netval(this->som_, ptr);
    *( (uint8_t*)ptr ) = this->index_in_room_, ++ptr;
    *( (uint8_t*)ptr ) = this->effect_type_, ++ptr;
    conv::to_netval(this->effect_mask_, ptr);
    *( (uint8_t*)ptr ) = this->effect_status_, ++ptr;
    conv::to_netval(this->effect_duration_, ptr);
    *( (uint8_t*)ptr ) = this->effect_overlap_times_, ++ptr;
    size = ptr - buffer;
    this->som_ = static_cast<uint16_t>( size - sizeof(this->mt_) - sizeof(this->som_) );
    conv::to_netval_i(this->som_, buffer + 1);
}

void player_effect_change_info::decode(const char* data, int)
{
    const char* ptr = data;
    this->mt_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->som_, ptr);
    this->index_in_room_ = *( (uint8_t*)ptr ), ++ptr;
    this->effect_type_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->effect_mask_, ptr);
    this->effect_status_ = *( (uint8_t*)ptr ), ++ptr;
    conv::to_hostval(this->effect_duration_, ptr);
    this->effect_overlap_times_ = *( (uint8_t*)ptr ), ++ptr;
}

std::string player_effect_change_info::get_formated_string(void) const
{
    std::stringstream ss;
    ss << "player_effect_change_info:\n";
    ss << strfmt("mt_", (int)this->mt_ << '\n', '-');
    ss << strfmt("som_", this->som_ << '\n', '-');
    ss << strfmt("index_in_room_", (int)this->index_in_room_ << '\n', '-');
    ss << strfmt("effect_type_", (int)this->effect_type_ << '\n', '-');
    ss << strfmt("effect_mask_", this->effect_mask_ << '\n', '-');
    ss << strfmt("effect_status_", (int)this->effect_status_ << '\n', '-');
    ss << strfmt("effect_duration_", this->effect_duration_ << '\n', '-');
    ss << strfmt("effect_overlap_times_", (int)this->effect_overlap_times_ << '\n', '-');
    return ss.str();
}

