/* This file is generated by pcode_autog
** Copyright(c) Laked.Goo, ALL RIGHTS RESERVED.
**
** Purpose: contains all protocol message definiations and codec function
**          implementations
**
*/
#ifndef _PROTOCOL_MESSAGES_H_
#define _PROTOCOL_MESSAGES_H_

#include "protocol_includes.h"
#include "protocol_structures.h"

using namespace structures;
namespace messages {

struct player_room_list_refresh_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 page_num_;

    player_room_list_refresh_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_room_list_refresh_response {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 retcode_;
    uint8_t                 hall_num_;
    uint8_t                 page_num_;
    room_info               room_infos_[18];

    player_room_list_refresh_response(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_view_online_count_request {
    uint8_t                 mt_;
    uint16_t                som_;

    player_view_online_count_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_view_online_count_response {
    uint8_t                 mt_;
    uint16_t                som_;
    uint16_t                count_of_hall_;
    uint32_t                count_of_total_;

    player_view_online_count_response(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_enter_room_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 room_number_;
    player_info_from_client  player_info_from_client_;

    player_enter_room_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_enter_room_response {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 retcode_;
    uint8_t                 hall_number_;
    uint8_t                 room_number_;
    uint8_t                 player_count_;
    player_info             all_player_infos_[6];

    player_enter_room_response(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_enter_room_information {
    uint8_t                 mt_;
    uint16_t                som_;
    player_info             new_player_info_;

    player_enter_room_information(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_move_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint32_t                player_id_;
    uint8_t                 move_type_;
    int16_t                 new_x_;
    int16_t                 new_y_;
    uint8_t                 direction_;

    player_move_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_move_response {
    uint8_t                 mt_;
    uint16_t                som_;

    player_move_response(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_move_information {
    uint8_t                 mt_;
    uint16_t                som_;
    uint32_t                player_id_;
    uint8_t                 move_type_;
    int16_t                 new_x_;
    int16_t                 new_y_;
    uint8_t                 direction_;

    player_move_information(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_use_item_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 item_issuer_iir_;
    uint16_t                item_widget_id_;
    uint32_t                item_serial_number_;
    int16_t                 item_issue_x_;
    int16_t                 item_issue_y_;
    uint8_t                 item_issue_direction_;

    player_use_item_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_use_item_information {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 item_issuer_iir_;
    uint16_t                item_widget_id_;
    uint32_t                item_serial_number_;
    int16_t                 item_issue_x_;
    int16_t                 item_issue_y_;
    uint8_t                 item_issue_direction_;
    int32_t                 item_issuer_evalue_cost_;
    int32_t                 item_issuer_reality_evalue_;
    uint8_t                 use_item_retcode_;

    player_use_item_information(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct issuing_item_collision_info {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 item_issuer_iir_;
    uint8_t                 item_hitter_iir_;
    uint16_t                item_widget_id_;
    uint32_t                item_serial_number_;
    int16_t                 item_collision_x_;
    int16_t                 item_collision_y_;
    uint16_t                item_collision_angle_;

    issuing_item_collision_info(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_use_item_result {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 item_issuer_iir_;
    uint8_t                 item_hitter_iir_;
    uint16_t                item_widget_id_;
    uint32_t                item_serial_number_;
    int16_t                 item_collision_x_;
    int16_t                 item_collision_y_;
    uint16_t                item_collision_angle_;
    int32_t                 item_issuer_gold_bounty_;
    int32_t                 item_issuer_cur_round_gold_;
    int32_t                 item_issuer_cur_total_gold_;
    uint8_t                 item_valid_range_player_count_;
    item_valid_range_info   item_valid_range_players_[6];

    player_use_item_result(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct widget_collision_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint16_t                widget_id_;
    uint32_t                widget_serial_number_;
    int16_t                 widget_x_;
    int16_t                 widget_y_;
    uint32_t                widget_collision_player_;

    widget_collision_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct widget_collision_information {
    uint8_t                 mt_;
    uint16_t                som_;
    uint16_t                widget_id_;
    uint32_t                widget_serial_number_;
    int16_t                 widget_x_;
    int16_t                 widget_y_;
    uint32_t                widget_collision_player_;
    bool                    succeed_;
    uint32_t                wcp_exp_plus_;
    uint32_t                wcp_level_cur_exp_;
    uint32_t                wcp_levelup_total_exp_;
    uint32_t                wcp_cur_round_exp_;
    uint32_t                wcp_evalue_plus_;
    uint32_t                wcp_cur_evalue_;
    uint32_t                wcp_evalue_toplimit_;
    int32_t                 wcp_gold_plus_;
    int32_t                 wcp_cur_round_gold_;
    int32_t                 wcp_cur_total_gold_;
    int32_t                 wcp_gold_capacity_;
    uint16_t                seq_got_same_widget_times_;

    widget_collision_information(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_exit_room_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 index_in_room_;

    player_exit_room_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_exit_room_information {
    uint8_t                 mt_;
    uint16_t                som_;
    uint32_t                player_id_;
    uint8_t                 reason_;

    player_exit_room_information(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_chat_message {
    uint8_t                 mt_;
    uint16_t                som_;
    uint32_t                sender_;
    uint32_t                receiver_;
    uint16_t                chat_len_;
    char                    chat_content_[499];

    player_chat_message(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_change_ready_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 index_in_room_;
    uint8_t                 new_ready_state_;

    player_change_ready_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_change_ready_response {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 retcode_;
    uint8_t                 new_ready_state_;

    player_change_ready_response(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_change_ready_info {
    uint8_t                 mt_;
    uint16_t                som_;
    uint32_t                player_id_;
    uint8_t                 new_ready_state_;

    player_change_ready_info(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_hall_update_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 new_hall_id_;

    player_hall_update_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_hall_update_response {
    uint8_t                 mt_;
    uint16_t                som_;
    bool                    succeed_;

    player_hall_update_response(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct game_start_information {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 second_;
    uint8_t                 player_count_;
    player_service_info     player_service_infos_[6];
    uint16_t                widgets_drop_speed_;
    uint32_t                drop_widget_count_;
    drop_widget_info*       drop_widget_infos_;

    game_start_information(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct item_donate_for_player {
    uint8_t                 mt_;
    uint16_t                som_;
    uint16_t                donate_item_count_;
    donate_item_info*       donate_item_infos_;

    item_donate_for_player(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct game_end_information {
    uint8_t                 mt_;
    uint16_t                som_;
    int32_t                 best_player_gold_award_;
    uint32_t                best_player_exp_award_;
    uint32_t                best_player_id_;
    uint8_t                 player_count_;
    player_game_result      player_game_results_[6];

    game_end_information(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_heartbeat_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint32_t                sequence_number_;

    player_heartbeat_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_heartbeat_response {
    uint8_t                 mt_;
    uint16_t                som_;
    uint32_t                sequence_number_;

    player_heartbeat_response(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct new_player_logon_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint32_t                player_id_;

    new_player_logon_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct new_player_logon_response {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 heartbeat_interval_;
    uint8_t                 logon_retcode_;
    uint32_t                item_use_cd_initial_;
    uint32_t                item_use_cd_min_;
    uint32_t                item_use_cd_reduce_;
    uint8_t                 vip_item_cd_rebate_;
    uint8_t                 vip_cost_rebate_;
    uint8_t                 item_count_;
    item_cost_info*         item_cost_infos_;

    new_player_logon_response(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct later_player_logon_request {
    uint8_t                 mt_;
    uint16_t                som_;
    bool                    logon_forcibly_;

    later_player_logon_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct later_player_logged_on_notify {
    uint8_t                 mt_;
    uint16_t                som_;

    later_player_logged_on_notify(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_effect_change_request {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 index_in_room_;
    uint8_t                 effect_type_;
    uint32_t                effect_mask_;
    uint8_t                 effect_status_;
    uint32_t                effect_duration_;
    uint8_t                 effect_overlap_times_;

    player_effect_change_request(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

struct player_effect_change_info {
    uint8_t                 mt_;
    uint16_t                som_;
    uint8_t                 index_in_room_;
    uint8_t                 effect_type_;
    uint32_t                effect_mask_;
    uint8_t                 effect_status_;
    uint32_t                effect_duration_;
    uint8_t                 effect_overlap_times_;

    player_effect_change_info(void);

    void encode(char* buffer, int& size);

    void decode(const char* data, int len);

    std::string get_formated_string(void) const;
};

};


#endif

